import { useState } from 'react';

import FormInput from "../form-input/form-input.jsx";
import Button, { BUTTON_TYPE_CLASSES } from "../button/button.jsx";

import {
  signInWithGooglePopup,
  signInAuthUserWithEmailAndPassword,
} from "../../utils/firebase/firebase"
 
import { SignInContainer, SignInSubtitle, ButtonsContainer } from "../sign-in-form/sign-in-form.styles.jsx";

const defaultFormFields = { // Define os campos iniciais do formulÃ¡rio.
  email: '',
  password: '',
}; // Desestrutura os campos de e-mail e senha do estado.

export const SignInForm = () => {
  const [formFields, setFormFields] = useState(defaultFormFields); // Estado para armazenar os campos do formulÃ¡rio.
  const { email, password } = formFields;

  const resetFormFields = () => {
    setFormFields(defaultFormFields); // FunÃ§Ã£o para resetar os campos do formulÃ¡rio para os valores padrÃ£o.
  };

  const signInWithGoogle = async () => { // FunÃ§Ã£o para lidar com o login usando o Google.
    await signInWithGooglePopup(); // Chama a funÃ§Ã£o de autenticaÃ§Ã£o do Google.
  };

  const handleSubmit = async (event) => { // FunÃ§Ã£o chamada ao submeter o formulÃ¡rio.
    event.preventDefault(); // Previne o comportamento padrÃ£o de recarregar a pÃ¡gina ao enviar o formulÃ¡rio.

    try {
        await signInAuthUserWithEmailAndPassword( // Tenta autenticar o usuÃ¡rio com e-mail e senha.
        email,
        password
      );

      resetFormFields(); // Reseta os campos do formulÃ¡rio apÃ³s o login bem-sucedido.

    } catch (error) { // Captura e lida com erros de autenticaÃ§Ã£o.
      switch (error.code) {
        case 'auth/wrong-password': 
          alert('incorrect password for email'); // Alerta para senha ou email incorretos.
          break; 
        case 'auth/user-not-found':
          alert('no user associated with this email'); // Alerta para e-mail nÃ£o encontrado.
          break;
        default:
          console.log(error); // Loga outros erros nÃ£o especÃ­ficos.
      }
    }
  };

  const handleChange = (event) => { // FunÃ§Ã£o para lidar com mudanÃ§as nos campos do formulÃ¡rio.
    const { name, value } = event.target; // ObtÃ©m o nome e valor do campo alterado.

    setFormFields({ ...formFields, [name]: value }); // Atualiza o estado com o novo valor do campo.
  };

  return (
    <SignInContainer>
      <SignInSubtitle> ğŸ’– JÃ¡ tem cadastro? ğŸ’– </SignInSubtitle>
        <span> ğŸ’— Entre com seu E-mail e Senha ğŸ’— </span>
      <form onSubmit={handleSubmit}> {/* FormulÃ¡rio que chama handleSubmit ao ser enviado */}
        <FormInput
          label='E-mail â™¥'
          type='email' 
          required
          onChange={handleChange} // Atualiza o estado quando o valor do input muda
          name='email'
          value={email}
        />

        <FormInput
          label='Senha â™¥'
          type='password'
          required
          onChange={handleChange} // Atualiza o estado quando o valor do input muda
          name='password'
          value={password}
        />
        <ButtonsContainer>
          <Button 
            onClick={handleSubmit}
            type='submit'> 
              â™¥ Entrar â™¥ 
          </Button>
          <Button 
            type='button' 
            buttonType={BUTTON_TYPE_CLASSES.google} 
            onClick={signInWithGoogle}> {/* BotÃ£o para login com Google */}
            Login Google ğŸ‡¬ 
          </Button>
        </ButtonsContainer>
      </form>
    </SignInContainer>
  );
};